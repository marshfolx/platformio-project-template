
;# 基本语法:
;基本和一般ini 文件相同,扩展了部分功能. 文件一般由[platformio], [env], [env:xxx] 和[common] 构成.
;
;**字符串和空白字符**
;和普通ini 文件一样,值默认是字符串,且不能添加双引号. 如:
;key = aaa bbb ccc
;不能用双引号把值包起来.
;
;每一项中,'=' 之后, 值的前导空白被忽略, 换行之前,值的后缀空白字符被忽略.等于做了一次strip.
;
;
;**集合 / 多选**
;部分配置项是集合类型,注释中会用'[M]'标记,可以添加多个值,不同的值用换行分隔. 每行值前导的空白字符会被忽略,所以可以添加缩进.
;例:
;;[M]
;multiple_selection =
;   selection_AAAAA
;   selection_BBBBB
;
;**参数类型**
;除了字符串外,一部分设置有其他类型, 形式和标注如下:
;类型      形式          标注
;布尔:  [yes | no]    - [B]
;数字:  [int | float] - [N]
;
;额外的取值等信息会使用类似[N [0|1]] 的方式标注, 使用正则语法.
;
;**通配符**
;部分设置值中可以使用通配符, 语法如下:
;  *      -    匹配任意长的任意字符, 等于'.*'
;  ?      -    匹配一个任意字符, 等于'.'
;  [abc]  -    匹配序列中的任意字符, 即匹配a, b, 或c. 和正则一样.
;  [!abc] -    匹配任意序列以外的字符, 等于'[^abc]'


;refer to https://docs.platformio.org/en/latest/projectconf/section_platformio.html
[platformio]
description = attiny13a project

;[M] include 其他配置文件.
extra_configs = 
    ./config_extra/platformio_extra.ini    ;其他不常用的platformio section 的配置.
    ./config_extra/env_debug.ini           ;debug 相关的配置.
    ./config_extra/env_monitor_test.ini    ;与串口监视器和单元测试有关的配置.
    ./config_extra/env_extra.ini           ;其他不常用env section 的配置.




;[env]和[env:xxx] 是一个配置集,包含大部分配置参数.
;可以定义[env:Name], 使用Name 作为这个配置集的名称,与其他配置集区分开,在不同场景下使用.
;[env] 定义了所有其他[env:xxx] 的公共配置. 或者说其他[env:xxx] 是偏特化.
;refer to https://docs.platformio.org/en/latest/projectconf/section_env.html
[env]
;项目的平台
platform = atmelavr

;[M] 要使用的软件框架,可在board 配置文件定义的范围选择.
;framework = Arduino

;指定一个目标硬件, 引入对应json 文件中预定义的配置
;这些配置项目的名称一般都是board_xxxx.nnn, 对应json 文件中的xxxx.nnnn.
;可以直接定义,覆盖json 的配置或者添加新配置.
board = ATtiny13A-NAKED

;以下设置会覆盖board 文件的默认值,更多设置项参考board 文件.
;board_build.mcu =
;board_build.f_cpu =
;board_build.ldscript =


;[M] 额外引入的package, 包括toolchain 和框架等,可以用于覆盖默认的package,或者引入更新版本的package.
;package 一般建议放到core_dir/packages 里,配置文件参照其他默认package.
;platform_packages =
;   toolchain-gcc@>1.50000.0                ;指定版本大于1.5 的package
;   toolchain-gcc@https://gitbub...         ;从指定repo 下载package
;   toolchain-gcc@file://c:/gcc/            ;使用本地路径的package
;   toolchain-atmelavr@file://c:/avr-gcc/   ;要替换默认的toolchain 时,要使用相同的package 名称.

;定义这个配置集用于哪个编译类型,默认为release. 
;使用 debug类型时, 要与一些debug_xxxx 的配置配合, 参考 https://docs.platformio.org/en/latest/projectconf/section_env_debug.html#projectconf-debug-build-flags.
;build_type =

;[M] 编译选项. 其中可以使用Platformio 预定义变量, 和动态变量, 参见https://docs.platformio.org/en/latest/projectconf/section_env_build.html#built-in-variables
;build_flags =
;   -D MACRO=VAL    ;定义宏MACRO, 值为VAL
;   -I DIR          ;添加include 路径
;   -include FILE.h ;将file.h 引入编译单元,
;   -L DIR          ;添加库文件路径
;   -l name.lib     ;链接name.lib

;[M] 仅用于src 目录下源文件的编译参数, 不影响库源码.
;src_build_flags =

;[M] 删除同名编译选项. 打开platformio build 时的verbose 输出, 可以查看预定义的编译选项.
;build_unfalgs =

;[M] 过滤文件
;src_filter =

;[M] 预定义的target, 代表一定的动作, 包括自动上传, 打开串口监视器等.
;targets =

;====== Library =======
;以下定义与platformio 的依赖库查找器(LDF)有关. 参见 https://docs.platformio.org/en/latest/projectconf/section_env_library.html
;这里的库是指符合platformio 格式的arduino 式代码库, 一般以源码形式分发. 
;一般C/C++ 库通过编译选项引入, 库的头文件可以放进include 文件夹,或者在项目根目录下建立独立的库文件夹
;[M] 声明需要被自动安装的依赖库
;lib_deps =

;[M] 声明要被LDF 忽略的库
;lib_ignore =

;[M] 声明额外的库查找路径, 也可使用环境变量PLATFORMIO_LIB_EXTRA_DIRS 定义.
;lib_extra_dirs =

;定义LDF 分析依赖的方式
;lib_ldf_mode =

;设置LDF 兼容性检查的模式
;lib_compat_mode =

;[B] 设置platformio 的链接方式, 默认为yes.
;lib_archive =

;===== Upload =====
;以下设置用于配置上传工具, 部分设置会覆盖board_upload.xxx 设置.
;参见 https://docs.platformio.org/en/latest/projectconf/section_env_upload.html

;声明上传端口, 也可使用环境变量PLATFORMIO_UPLOAD_PORT 设置.
;upload_port =

;声明上传协议,或编程器. 只能选择board 文件中定义的协议.
;upload_protocol =

;[N] 声明串口波特率, 覆盖board 文件的设置. 非串口编程的无效.
;upload_speed =

;[M] 传输给编程工具的额外选项, 可使用环境变量PLATFORMIO_UPLOAD_FLAGS 设置.
;upload_flags =

;复位方式, 仅用于esp8266 开发板
;upload_resetmethod =

;自定义上传命令. 当upload_protocol = custom 时可用, 可以覆盖默认上传命令.
;可以使用platformio 内部变量, 参见build_flags
;upload_command =


;这一节用于存放自定义数据, 可在env 中用${common.xxx} 语法引用
[common]
;debug_flags = -D RELEASE
;lib_flags = -lc -lm

